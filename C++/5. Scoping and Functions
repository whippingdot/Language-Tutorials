# Scoping and Functions

## Start

In this file, we will go over scoping and functions. Scoping is used for plenty of reasons, such as allowing reusing variables names, making code easier to reason about, reducing accessibility of data, among other reasons.

Functions are useful for abstracting code, removing code implementation details, and creating reusable code.

## Scoping

There are plenty of different ways that scopes can be classified, and plenty of reasons to use scoping.

Scoping affects variable visibilty, this entails quite a lot, while being such a simple idea.

As a general rule, scopes are created by curly brackets (`{}`).

The main function itself has curly brackets as part of it's declaration syntax, and all variables declared within it are scoped to the function itself.

But, what even is "variable visibility"?

A variable defined within a scope is not accessable outside of the scope that it was declared in.

Examples:
```c++
int main() {
    char a = 'a';

    std::cout << a; // {a} is visible here
}
```

```c++
int main() {
    { // place arbitrary curly brackets to create a new scope
        char a = 'a';

        std::cout << a; // {a} is visible here
    }

    std::cout << a; // {a} is not visible here
}
```

But, variables are not their data, they are containers for data, so you can move the values stored in variables inside and outside of scopes.

Example:

```
int main() {
    char a = 'a';

    {
        char b = 'b';

        a = b; // a holds 'b'
    }

    std::cout << a; // prints "b"
}
```

When getting involved with more complicated, user-created types, other things will come into consideration, such as data lifetimes, which will be covered later.

___

## Functions

Functions are executable sections of code.

<!-- base below -->

Functions are used in python help organize a python program and avoid repeating code. Python has many built in functions, and you have already seen one! The `print` statement is in fact a function.

To define your own function, use the `def` keyword followed by the name of your function.

Example:

### Code

```python
def the_answer():
  return 42


answer = the_answer()
print("The answer is ", answer
```

### Output

```shell
42
```

&nbsp

## Return Statement

In the above example, we used a `return` statement to return a result from the function. We also assigned the result to a variable named `answer` and then printed it out.

## Arguments

Functions get even more useful when you pass in arguments. You can define arguments for your function in the middle of the parentheses.

Example:

### Code

```python
def divide(x, y):
  """
   Returns the first number divided by the second number.
  """
  return x / y

num1 = 6
num2 = 3
print(f"{num1} divided by {num2} = {divide(num1, num2)}")
```

### Output

```shell
6 divided by 3 = 2
```

Here we declared a function called `divide` that takes in two arguments (`x` and `y`) and outputs a result. We used **f-strings** to output the result.
Another thing we did is wrote a comment describing what the function does. This is known as a **docstring** and is good to add as your functions get more complex.

# [NEXT]()

# [PREVIOUS](3.%20operators.md)
